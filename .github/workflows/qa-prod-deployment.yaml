name: TRACKING-TAG-BASED-DEPLOYMENT

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (qa or prod)"
        required: true
        default: "qa"
      tag:
        description: "Image tag to deploy (used for workflow_dispatch)"
        required: false

jobs:
  deploy:
    name: Deploy Tracking Service
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # Step 1: Checkout code
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Set TAG environment variable
      - name: Set TAG environment variable
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${{ github.event.inputs.tag }}"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      # Step 3: Debug TAG value
      - name: Debug TAG value
        run: echo "TAG value:${{ env.TAG }}"

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Generate ConfigMap YAML safely
      - name: Generate ConfigMap YAML
        run: |
          mkdir -p manifest
          cat <<EOF > manifest/configmap.yaml
          ${{ secrets.ENV_FILE_CONTENT }}
          EOF

      # Step 6: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Build, tag, and push Docker image
      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ env.TAG }}
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG} .
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}

      # Step 8: Update Deployment Manifest
      - name: Update Deployment Manifest
        env:
          FULL_IMAGE: "${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.TAG }}"
        run: |
          envsubst < manifest/tracking-service.yaml > manifest/tracking-service-updated.yaml
          echo "Updated deployment manifest:"
          cat manifest/tracking-service-updated.yaml

      # Step 9: Deploy to AWS EKS
      - name: Deploy to AWS EKS
        env:
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
          NAMESPACE: ${{ github.event.inputs.environment == 'prod' && 'default' || 'microservices-qa' }}
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}
          kubectl apply -f manifest/tracking-service-updated.yaml -n $NAMESPACE
          kubectl apply -f manifest/configmap.yaml -n $NAMESPACE
          sleep 10
          echo "Pods status:"
          kubectl get pods -n $NAMESPACE | grep tracking
